-- Show get_missing_partition_ranges function can be only callede for timeseries tables
CREATE TABLE date_partitioned_table(
    measureid integer,
    eventdate date,
    measure_data integer) PARTITION BY RANGE(eventdate);
SELECT create_missing_partitions('date_partitioned_table', now() + INTERVAL '15 days');
ERROR:  date_partitioned_table must be timeseries table
CONTEXT:  PL/pgSQL function get_missing_partition_ranges(regclass,timestamp with time zone,timestamp with time zone) line XX at RAISE
PL/pgSQL function create_missing_partitions(regclass,timestamp with time zone,timestamp with time zone) line 15 at FOR over SELECT rows
-- Create missing partitions for various ranges on date partitioned table
BEGIN;
    SELECT create_timeseries_table('date_partitioned_table', INTERVAL '1 day');
 create_timeseries_table
---------------------------------------------------------------------

(1 row)

    SELECT create_missing_partitions('date_partitioned_table', now() + INTERVAL '15 days');
 create_missing_partitions
---------------------------------------------------------------------
 t
(1 row)

    SELECT
        date_trunc('day', now()) - from_value::date as from_diff,
        date_trunc('day', now()) - to_value::date as to_diff
    FROM pg_catalog.time_partitions
    WHERE parent_table = 'date_partitioned_table'::regclass
    ORDER BY 1,2;
   from_diff   |    to_diff
---------------------------------------------------------------------
 @ 15 days ago | @ 16 days ago
 @ 14 days ago | @ 15 days ago
 @ 13 days ago | @ 14 days ago
 @ 12 days ago | @ 13 days ago
 @ 11 days ago | @ 12 days ago
 @ 10 days ago | @ 11 days ago
 @ 9 days ago  | @ 10 days ago
 @ 8 days ago  | @ 9 days ago
 @ 7 days ago  | @ 8 days ago
 @ 6 days ago  | @ 7 days ago
 @ 5 days ago  | @ 6 days ago
 @ 4 days ago  | @ 5 days ago
 @ 3 days ago  | @ 4 days ago
 @ 2 days ago  | @ 3 days ago
 @ 1 day ago   | @ 2 days ago
 @ 0           | @ 1 day ago
 @ 1 day       | @ 0
 @ 2 days      | @ 1 day
 @ 3 days      | @ 2 days
 @ 4 days      | @ 3 days
 @ 5 days      | @ 4 days
 @ 6 days      | @ 5 days
 @ 7 days      | @ 6 days
(23 rows)

ROLLBACK;
BEGIN;
    SELECT create_timeseries_table('date_partitioned_table', INTERVAL '1 day');
 create_timeseries_table
---------------------------------------------------------------------

(1 row)

    SELECT create_missing_partitions('date_partitioned_table', now() + INTERVAL '10 days', now() - INTERVAL '10 days');
 create_missing_partitions
---------------------------------------------------------------------
 t
(1 row)

    SELECT
        date_trunc('day', now()) - from_value::date as from_diff,
        date_trunc('day', now()) - to_value::date as to_diff
    FROM pg_catalog.time_partitions
    WHERE parent_table = 'date_partitioned_table'::regclass
    ORDER BY 1,2;
   from_diff   |    to_diff
---------------------------------------------------------------------
 @ 10 days ago | @ 11 days ago
 @ 9 days ago  | @ 10 days ago
 @ 8 days ago  | @ 9 days ago
 @ 7 days ago  | @ 8 days ago
 @ 6 days ago  | @ 7 days ago
 @ 5 days ago  | @ 6 days ago
 @ 4 days ago  | @ 5 days ago
 @ 3 days ago  | @ 4 days ago
 @ 2 days ago  | @ 3 days ago
 @ 1 day ago   | @ 2 days ago
 @ 0           | @ 1 day ago
 @ 1 day       | @ 0
 @ 2 days      | @ 1 day
 @ 3 days      | @ 2 days
 @ 4 days      | @ 3 days
 @ 5 days      | @ 4 days
 @ 6 days      | @ 5 days
 @ 7 days      | @ 6 days
 @ 8 days      | @ 7 days
 @ 9 days      | @ 8 days
 @ 10 days     | @ 9 days
(21 rows)

ROLLBACK;
BEGIN;
    SELECT create_timeseries_table('date_partitioned_table', INTERVAL '5 days');
 create_timeseries_table
---------------------------------------------------------------------

(1 row)

    SELECT create_missing_partitions('date_partitioned_table', now() + INTERVAL '45 days', now() - INTERVAL '45 days');
 create_missing_partitions
---------------------------------------------------------------------
 t
(1 row)

    SELECT
        date_trunc('day', now()) - from_value::date as from_diff,
        date_trunc('day', now()) - to_value::date as to_diff
    FROM pg_catalog.time_partitions
    WHERE parent_table = 'date_partitioned_table'::regclass
    ORDER BY 1,2;
   from_diff   |    to_diff
---------------------------------------------------------------------
 @ 45 days ago | @ 50 days ago
 @ 40 days ago | @ 45 days ago
 @ 35 days ago | @ 40 days ago
 @ 30 days ago | @ 35 days ago
 @ 25 days ago | @ 30 days ago
 @ 20 days ago | @ 25 days ago
 @ 15 days ago | @ 20 days ago
 @ 10 days ago | @ 15 days ago
 @ 5 days ago  | @ 10 days ago
 @ 0           | @ 5 days ago
 @ 5 days      | @ 0
 @ 10 days     | @ 5 days
 @ 15 days     | @ 10 days
 @ 20 days     | @ 15 days
 @ 25 days     | @ 20 days
 @ 30 days     | @ 25 days
 @ 35 days     | @ 30 days
 @ 40 days     | @ 35 days
 @ 45 days     | @ 40 days
(19 rows)

ROLLBACK;
-- Show start from date must be before any of existing partition ranges
BEGIN;
    SELECT create_timeseries_table('date_partitioned_table', INTERVAL '1 day');
 create_timeseries_table
---------------------------------------------------------------------

(1 row)

    SELECT create_missing_partitions('date_partitioned_table', now() + INTERVAL '5 days', now() - INTERVAL '5 days');
ERROR:  given start_from value must be before any of the existing partition ranges
CONTEXT:  PL/pgSQL function get_missing_partition_ranges(regclass,timestamp with time zone,timestamp with time zone) line XX at RAISE
PL/pgSQL function create_missing_partitions(regclass,timestamp with time zone,timestamp with time zone) line 15 at FOR over SELECT rows
    SELECT
        date_trunc('day', now()) - from_value::date as from_diff,
        date_trunc('day', now()) - to_value::date as to_diff
    FROM pg_catalog.time_partitions
    WHERE parent_table = 'date_partitioned_table'::regclass
    ORDER BY 1,2;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
ROLLBACK;
DROP TABLE date_partitioned_table;
-- Create missing partitions for various ranges on timestamptz partitioned table
CREATE TABLE tstz_partitioned_table(
    measureid integer,
    eventdatetime timestamp with time zone,
    measure_data integer) PARTITION BY RANGE(eventdatetime);
BEGIN;
    SELECT create_timeseries_table('tstz_partitioned_table', INTERVAL '1 hour');
 create_timeseries_table
---------------------------------------------------------------------

(1 row)

    SELECT create_missing_partitions('tstz_partitioned_table', now() + INTERVAL '1 day');
 create_missing_partitions
---------------------------------------------------------------------
 t
(1 row)

    SELECT
        date_trunc('hour', now()) - from_value::timestamp with time zone as from_diff,
        date_trunc('hour', now()) - to_value::timestamp with time zone as to_diff
    FROM pg_catalog.time_partitions
    WHERE parent_table = 'tstz_partitioned_table'::regclass
    ORDER BY 1,2;
   from_diff    |      to_diff
---------------------------------------------------------------------
 @ 1 day ago    | @ 1 day 1 hour ago
 @ 23 hours ago | @ 1 day ago
 @ 22 hours ago | @ 23 hours ago
 @ 21 hours ago | @ 22 hours ago
 @ 20 hours ago | @ 21 hours ago
 @ 19 hours ago | @ 20 hours ago
 @ 18 hours ago | @ 19 hours ago
 @ 17 hours ago | @ 18 hours ago
 @ 16 hours ago | @ 17 hours ago
 @ 15 hours ago | @ 16 hours ago
 @ 14 hours ago | @ 15 hours ago
 @ 13 hours ago | @ 14 hours ago
 @ 12 hours ago | @ 13 hours ago
 @ 11 hours ago | @ 12 hours ago
 @ 10 hours ago | @ 11 hours ago
 @ 9 hours ago  | @ 10 hours ago
 @ 8 hours ago  | @ 9 hours ago
 @ 7 hours ago  | @ 8 hours ago
 @ 6 hours ago  | @ 7 hours ago
 @ 5 hours ago  | @ 6 hours ago
 @ 4 hours ago  | @ 5 hours ago
 @ 3 hours ago  | @ 4 hours ago
 @ 2 hours ago  | @ 3 hours ago
 @ 1 hour ago   | @ 2 hours ago
 @ 0            | @ 1 hour ago
 @ 1 hour       | @ 0
 @ 2 hours      | @ 1 hour
 @ 3 hours      | @ 2 hours
 @ 4 hours      | @ 3 hours
 @ 5 hours      | @ 4 hours
 @ 6 hours      | @ 5 hours
 @ 7 hours      | @ 6 hours
(32 rows)

ROLLBACK;
BEGIN;
    SELECT create_timeseries_table('tstz_partitioned_table', INTERVAL '1 hour');
 create_timeseries_table
---------------------------------------------------------------------

(1 row)

    SELECT create_missing_partitions('tstz_partitioned_table', now() + INTERVAL '1 day', now() - INTERVAL '1 day');
 create_missing_partitions
---------------------------------------------------------------------
 t
(1 row)

    SELECT
        date_trunc('hour', now()) - from_value::timestamp with time zone as from_diff,
        date_trunc('hour', now()) - to_value::timestamp with time zone as to_diff
    FROM pg_catalog.time_partitions
    WHERE parent_table = 'tstz_partitioned_table'::regclass
    ORDER BY 1,2;
   from_diff    |      to_diff
---------------------------------------------------------------------
 @ 1 day ago    | @ 1 day 1 hour ago
 @ 23 hours ago | @ 1 day ago
 @ 22 hours ago | @ 23 hours ago
 @ 21 hours ago | @ 22 hours ago
 @ 20 hours ago | @ 21 hours ago
 @ 19 hours ago | @ 20 hours ago
 @ 18 hours ago | @ 19 hours ago
 @ 17 hours ago | @ 18 hours ago
 @ 16 hours ago | @ 17 hours ago
 @ 15 hours ago | @ 16 hours ago
 @ 14 hours ago | @ 15 hours ago
 @ 13 hours ago | @ 14 hours ago
 @ 12 hours ago | @ 13 hours ago
 @ 11 hours ago | @ 12 hours ago
 @ 10 hours ago | @ 11 hours ago
 @ 9 hours ago  | @ 10 hours ago
 @ 8 hours ago  | @ 9 hours ago
 @ 7 hours ago  | @ 8 hours ago
 @ 6 hours ago  | @ 7 hours ago
 @ 5 hours ago  | @ 6 hours ago
 @ 4 hours ago  | @ 5 hours ago
 @ 3 hours ago  | @ 4 hours ago
 @ 2 hours ago  | @ 3 hours ago
 @ 1 hour ago   | @ 2 hours ago
 @ 0            | @ 1 hour ago
 @ 1 hour       | @ 0
 @ 2 hours      | @ 1 hour
 @ 3 hours      | @ 2 hours
 @ 4 hours      | @ 3 hours
 @ 5 hours      | @ 4 hours
 @ 6 hours      | @ 5 hours
 @ 7 hours      | @ 6 hours
 @ 8 hours      | @ 7 hours
 @ 9 hours      | @ 8 hours
 @ 10 hours     | @ 9 hours
 @ 11 hours     | @ 10 hours
 @ 12 hours     | @ 11 hours
 @ 13 hours     | @ 12 hours
 @ 14 hours     | @ 13 hours
 @ 15 hours     | @ 14 hours
 @ 16 hours     | @ 15 hours
 @ 17 hours     | @ 16 hours
 @ 18 hours     | @ 17 hours
 @ 19 hours     | @ 18 hours
 @ 20 hours     | @ 19 hours
 @ 21 hours     | @ 20 hours
 @ 22 hours     | @ 21 hours
 @ 23 hours     | @ 22 hours
 @ 1 day        | @ 23 hours
(49 rows)

ROLLBACK;
BEGIN;
    SELECT create_timeseries_table('tstz_partitioned_table', INTERVAL '6 hours');
 create_timeseries_table
---------------------------------------------------------------------

(1 row)

    SELECT create_missing_partitions('tstz_partitioned_table', now() + INTERVAL '5 days', now() - INTERVAL '5 days');
 create_missing_partitions
---------------------------------------------------------------------
 t
(1 row)

    SELECT
        date_trunc('hour', now()) - from_value::timestamp with time zone as from_diff,
        date_trunc('hour', now()) - to_value::timestamp with time zone as to_diff
    FROM pg_catalog.time_partitions
    WHERE parent_table = 'tstz_partitioned_table'::regclass
    ORDER BY 1,2;
       from_diff       |        to_diff
---------------------------------------------------------------------
 @ 5 days ago          | @ 5 days 6 hours ago
 @ 4 days 18 hours ago | @ 5 days ago
 @ 4 days 12 hours ago | @ 4 days 18 hours ago
 @ 4 days 6 hours ago  | @ 4 days 12 hours ago
 @ 4 days ago          | @ 4 days 6 hours ago
 @ 3 days 18 hours ago | @ 4 days ago
 @ 3 days 12 hours ago | @ 3 days 18 hours ago
 @ 3 days 6 hours ago  | @ 3 days 12 hours ago
 @ 3 days ago          | @ 3 days 6 hours ago
 @ 2 days 18 hours ago | @ 3 days ago
 @ 2 days 12 hours ago | @ 2 days 18 hours ago
 @ 2 days 6 hours ago  | @ 2 days 12 hours ago
 @ 2 days ago          | @ 2 days 6 hours ago
 @ 1 day 18 hours ago  | @ 2 days ago
 @ 1 day 12 hours ago  | @ 1 day 18 hours ago
 @ 1 day 6 hours ago   | @ 1 day 12 hours ago
 @ 1 day ago           | @ 1 day 6 hours ago
 @ 18 hours ago        | @ 1 day ago
 @ 12 hours ago        | @ 18 hours ago
 @ 6 hours ago         | @ 12 hours ago
 @ 0                   | @ 6 hours ago
 @ 6 hours             | @ 0
 @ 12 hours            | @ 6 hours
 @ 18 hours            | @ 12 hours
 @ 1 day               | @ 18 hours
 @ 1 day 6 hours       | @ 1 day
 @ 1 day 12 hours      | @ 1 day 6 hours
 @ 1 day 18 hours      | @ 1 day 12 hours
 @ 2 days              | @ 1 day 18 hours
 @ 2 days 6 hours      | @ 2 days
 @ 2 days 12 hours     | @ 2 days 6 hours
 @ 2 days 18 hours     | @ 2 days 12 hours
 @ 3 days              | @ 2 days 18 hours
 @ 3 days 6 hours      | @ 3 days
 @ 3 days 12 hours     | @ 3 days 6 hours
 @ 3 days 18 hours     | @ 3 days 12 hours
 @ 4 days              | @ 3 days 18 hours
 @ 4 days 6 hours      | @ 4 days
 @ 4 days 12 hours     | @ 4 days 6 hours
 @ 4 days 18 hours     | @ 4 days 12 hours
 @ 5 days              | @ 4 days 18 hours
(41 rows)

ROLLBACK;
-- Show start from date must be before any of existing partition ranges
BEGIN;
    SELECT create_timeseries_table('tstz_partitioned_table', INTERVAL '1 day');
 create_timeseries_table
---------------------------------------------------------------------

(1 row)

    SELECT create_missing_partitions('tstz_partitioned_table', now() + INTERVAL '5 days', now() - INTERVAL '5 days');
ERROR:  given start_from value must be before any of the existing partition ranges
CONTEXT:  PL/pgSQL function get_missing_partition_ranges(regclass,timestamp with time zone,timestamp with time zone) line XX at RAISE
PL/pgSQL function create_missing_partitions(regclass,timestamp with time zone,timestamp with time zone) line 15 at FOR over SELECT rows
    SELECT
        date_trunc('day', now()) - from_value::timestamp with time zone as from_diff,
        date_trunc('day', now()) - to_value::timestamp with time zone as to_diff
    FROM pg_catalog.time_partitions
    WHERE parent_table = 'tstz_partitioned_table'::regclass;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
ROLLBACK;
DROP TABLE tstz_partitioned_table;
-- Show range values for timestamp without time zone partitioned table
CREATE TABLE tswtz_partitioned_table(
    measureid integer,
    eventdatetime timestamp without time zone,
    measure_data integer) PARTITION BY RANGE(eventdatetime);
BEGIN;
    SELECT create_timeseries_table('tswtz_partitioned_table', INTERVAL '1 hour');
 create_timeseries_table
---------------------------------------------------------------------

(1 row)

    SELECT create_missing_partitions('tswtz_partitioned_table', now() + INTERVAL '1 day');
 create_missing_partitions
---------------------------------------------------------------------
 t
(1 row)

    SELECT
        date_trunc('hour', now()) - from_value::timestamp without time zone as from_diff,
        date_trunc('hour', now()) - to_value::timestamp without time zone as to_diff
    FROM pg_catalog.time_partitions
    WHERE parent_table = 'tswtz_partitioned_table'::regclass
    ORDER BY 1,2;
   from_diff    |      to_diff
---------------------------------------------------------------------
 @ 1 day ago    | @ 1 day 1 hour ago
 @ 23 hours ago | @ 1 day ago
 @ 22 hours ago | @ 23 hours ago
 @ 21 hours ago | @ 22 hours ago
 @ 20 hours ago | @ 21 hours ago
 @ 19 hours ago | @ 20 hours ago
 @ 18 hours ago | @ 19 hours ago
 @ 17 hours ago | @ 18 hours ago
 @ 16 hours ago | @ 17 hours ago
 @ 15 hours ago | @ 16 hours ago
 @ 14 hours ago | @ 15 hours ago
 @ 13 hours ago | @ 14 hours ago
 @ 12 hours ago | @ 13 hours ago
 @ 11 hours ago | @ 12 hours ago
 @ 10 hours ago | @ 11 hours ago
 @ 9 hours ago  | @ 10 hours ago
 @ 8 hours ago  | @ 9 hours ago
 @ 7 hours ago  | @ 8 hours ago
 @ 6 hours ago  | @ 7 hours ago
 @ 5 hours ago  | @ 6 hours ago
 @ 4 hours ago  | @ 5 hours ago
 @ 3 hours ago  | @ 4 hours ago
 @ 2 hours ago  | @ 3 hours ago
 @ 1 hour ago   | @ 2 hours ago
 @ 0            | @ 1 hour ago
 @ 1 hour       | @ 0
 @ 2 hours      | @ 1 hour
 @ 3 hours      | @ 2 hours
 @ 4 hours      | @ 3 hours
 @ 5 hours      | @ 4 hours
 @ 6 hours      | @ 5 hours
 @ 7 hours      | @ 6 hours
(32 rows)

ROLLBACK;
BEGIN;
    SELECT create_timeseries_table('tswtz_partitioned_table', INTERVAL '1 hour');
 create_timeseries_table
---------------------------------------------------------------------

(1 row)

    SELECT create_missing_partitions('tswtz_partitioned_table', now() + INTERVAL '1 day', now() - INTERVAL '1 day');
 create_missing_partitions
---------------------------------------------------------------------
 t
(1 row)

    SELECT
        date_trunc('hour', now()) - from_value::timestamp without time zone as from_diff,
        date_trunc('hour', now()) - to_value::timestamp without time zone as to_diff
    FROM pg_catalog.time_partitions
    WHERE parent_table = 'tswtz_partitioned_table'::regclass
    ORDER BY 1,2;
   from_diff    |      to_diff
---------------------------------------------------------------------
 @ 1 day ago    | @ 1 day 1 hour ago
 @ 23 hours ago | @ 1 day ago
 @ 22 hours ago | @ 23 hours ago
 @ 21 hours ago | @ 22 hours ago
 @ 20 hours ago | @ 21 hours ago
 @ 19 hours ago | @ 20 hours ago
 @ 18 hours ago | @ 19 hours ago
 @ 17 hours ago | @ 18 hours ago
 @ 16 hours ago | @ 17 hours ago
 @ 15 hours ago | @ 16 hours ago
 @ 14 hours ago | @ 15 hours ago
 @ 13 hours ago | @ 14 hours ago
 @ 12 hours ago | @ 13 hours ago
 @ 11 hours ago | @ 12 hours ago
 @ 10 hours ago | @ 11 hours ago
 @ 9 hours ago  | @ 10 hours ago
 @ 8 hours ago  | @ 9 hours ago
 @ 7 hours ago  | @ 8 hours ago
 @ 6 hours ago  | @ 7 hours ago
 @ 5 hours ago  | @ 6 hours ago
 @ 4 hours ago  | @ 5 hours ago
 @ 3 hours ago  | @ 4 hours ago
 @ 2 hours ago  | @ 3 hours ago
 @ 1 hour ago   | @ 2 hours ago
 @ 0            | @ 1 hour ago
 @ 1 hour       | @ 0
 @ 2 hours      | @ 1 hour
 @ 3 hours      | @ 2 hours
 @ 4 hours      | @ 3 hours
 @ 5 hours      | @ 4 hours
 @ 6 hours      | @ 5 hours
 @ 7 hours      | @ 6 hours
 @ 8 hours      | @ 7 hours
 @ 9 hours      | @ 8 hours
 @ 10 hours     | @ 9 hours
 @ 11 hours     | @ 10 hours
 @ 12 hours     | @ 11 hours
 @ 13 hours     | @ 12 hours
 @ 14 hours     | @ 13 hours
 @ 15 hours     | @ 14 hours
 @ 16 hours     | @ 15 hours
 @ 17 hours     | @ 16 hours
 @ 18 hours     | @ 17 hours
 @ 19 hours     | @ 18 hours
 @ 20 hours     | @ 19 hours
 @ 21 hours     | @ 20 hours
 @ 22 hours     | @ 21 hours
 @ 23 hours     | @ 22 hours
 @ 1 day        | @ 23 hours
(49 rows)

ROLLBACK;
BEGIN;
    SELECT create_timeseries_table('tswtz_partitioned_table', INTERVAL '6 hours');
 create_timeseries_table
---------------------------------------------------------------------

(1 row)

    SELECT create_missing_partitions('tswtz_partitioned_table', now() + INTERVAL '5 days', now() - INTERVAL '5 days');
 create_missing_partitions
---------------------------------------------------------------------
 t
(1 row)

    SELECT
        date_trunc('hour', now()) - from_value::timestamp without time zone as from_diff,
        date_trunc('hour', now()) - to_value::timestamp without time zone as to_diff
    FROM pg_catalog.time_partitions
    WHERE parent_table = 'tswtz_partitioned_table'::regclass
    ORDER BY 1,2;
       from_diff       |        to_diff
---------------------------------------------------------------------
 @ 5 days ago          | @ 5 days 6 hours ago
 @ 4 days 18 hours ago | @ 5 days ago
 @ 4 days 12 hours ago | @ 4 days 18 hours ago
 @ 4 days 6 hours ago  | @ 4 days 12 hours ago
 @ 4 days ago          | @ 4 days 6 hours ago
 @ 3 days 18 hours ago | @ 4 days ago
 @ 3 days 12 hours ago | @ 3 days 18 hours ago
 @ 3 days 6 hours ago  | @ 3 days 12 hours ago
 @ 3 days ago          | @ 3 days 6 hours ago
 @ 2 days 18 hours ago | @ 3 days ago
 @ 2 days 12 hours ago | @ 2 days 18 hours ago
 @ 2 days 6 hours ago  | @ 2 days 12 hours ago
 @ 2 days ago          | @ 2 days 6 hours ago
 @ 1 day 18 hours ago  | @ 2 days ago
 @ 1 day 12 hours ago  | @ 1 day 18 hours ago
 @ 1 day 6 hours ago   | @ 1 day 12 hours ago
 @ 1 day ago           | @ 1 day 6 hours ago
 @ 18 hours ago        | @ 1 day ago
 @ 12 hours ago        | @ 18 hours ago
 @ 6 hours ago         | @ 12 hours ago
 @ 0                   | @ 6 hours ago
 @ 6 hours             | @ 0
 @ 12 hours            | @ 6 hours
 @ 18 hours            | @ 12 hours
 @ 1 day               | @ 18 hours
 @ 1 day 6 hours       | @ 1 day
 @ 1 day 12 hours      | @ 1 day 6 hours
 @ 1 day 18 hours      | @ 1 day 12 hours
 @ 2 days              | @ 1 day 18 hours
 @ 2 days 6 hours      | @ 2 days
 @ 2 days 12 hours     | @ 2 days 6 hours
 @ 2 days 18 hours     | @ 2 days 12 hours
 @ 3 days              | @ 2 days 18 hours
 @ 3 days 6 hours      | @ 3 days
 @ 3 days 12 hours     | @ 3 days 6 hours
 @ 3 days 18 hours     | @ 3 days 12 hours
 @ 4 days              | @ 3 days 18 hours
 @ 4 days 6 hours      | @ 4 days
 @ 4 days 12 hours     | @ 4 days 6 hours
 @ 4 days 18 hours     | @ 4 days 12 hours
 @ 5 days              | @ 4 days 18 hours
(41 rows)

ROLLBACK;
-- Show start from date must be before any of existing partition ranges
BEGIN;
    SELECT create_timeseries_table('tswtz_partitioned_table', INTERVAL '1 day');
 create_timeseries_table
---------------------------------------------------------------------

(1 row)

    SELECT create_missing_partitions('tswtz_partitioned_table', now() + INTERVAL '5 days', now() - INTERVAL '5 days');
ERROR:  given start_from value must be before any of the existing partition ranges
CONTEXT:  PL/pgSQL function get_missing_partition_ranges(regclass,timestamp with time zone,timestamp with time zone) line XX at RAISE
PL/pgSQL function create_missing_partitions(regclass,timestamp with time zone,timestamp with time zone) line 15 at FOR over SELECT rows
    SELECT
        date_trunc('day', now()) - from_value::timestamp without time zone as from_diff,
        date_trunc('day', now()) - to_value::timestamp without time zone as to_diff
    FROM pg_catalog.time_partitions
    WHERE parent_table = 'tswtz_partitioned_table'::regclass
    ORDER BY 1,2;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
ROLLBACK;
DROP TABLE tswtz_partitioned_table;
-- Create missing partitions for a table with schema given
CREATE SCHEMA timeseries_test_schema;
CREATE TABLE timeseries_test_schema.schema_test_partitioned_table(
    measureid integer,
    eventdate date,
    measure_data integer) PARTITION BY RANGE(eventdate);
BEGIN;
    SELECT create_timeseries_table('timeseries_test_schema.schema_test_partitioned_table', INTERVAL '1 day');
 create_timeseries_table
---------------------------------------------------------------------

(1 row)

    SELECT create_missing_partitions('timeseries_test_schema.schema_test_partitioned_table', now() + INTERVAL '15 days');
 create_missing_partitions
---------------------------------------------------------------------
 t
(1 row)

    SELECT
        date_trunc('day', now()) - from_value::date as from_diff,
        date_trunc('day', now()) - to_value::date as to_diff
    FROM pg_catalog.time_partitions
    WHERE parent_table = 'timeseries_test_schema.schema_test_partitioned_table'::regclass
    ORDER BY 1,2;
   from_diff   |    to_diff
---------------------------------------------------------------------
 @ 15 days ago | @ 16 days ago
 @ 14 days ago | @ 15 days ago
 @ 13 days ago | @ 14 days ago
 @ 12 days ago | @ 13 days ago
 @ 11 days ago | @ 12 days ago
 @ 10 days ago | @ 11 days ago
 @ 9 days ago  | @ 10 days ago
 @ 8 days ago  | @ 9 days ago
 @ 7 days ago  | @ 8 days ago
 @ 6 days ago  | @ 7 days ago
 @ 5 days ago  | @ 6 days ago
 @ 4 days ago  | @ 5 days ago
 @ 3 days ago  | @ 4 days ago
 @ 2 days ago  | @ 3 days ago
 @ 1 day ago   | @ 2 days ago
 @ 0           | @ 1 day ago
 @ 1 day       | @ 0
 @ 2 days      | @ 1 day
 @ 3 days      | @ 2 days
 @ 4 days      | @ 3 days
 @ 5 days      | @ 4 days
 @ 6 days      | @ 5 days
 @ 7 days      | @ 6 days
(23 rows)

ROLLBACK;
BEGIN;
    SELECT create_timeseries_table('timeseries_test_schema.schema_test_partitioned_table', INTERVAL '1 day');
 create_timeseries_table
---------------------------------------------------------------------

(1 row)

    SELECT create_missing_partitions('timeseries_test_schema.schema_test_partitioned_table', now() + INTERVAL '10 days', now() - INTERVAL '10 days');
 create_missing_partitions
---------------------------------------------------------------------
 t
(1 row)

    SELECT
        date_trunc('day', now()) - from_value::date as from_diff,
        date_trunc('day', now()) - to_value::date as to_diff
    FROM pg_catalog.time_partitions
    WHERE parent_table = 'timeseries_test_schema.schema_test_partitioned_table'::regclass
    ORDER BY 1,2;
   from_diff   |    to_diff
---------------------------------------------------------------------
 @ 10 days ago | @ 11 days ago
 @ 9 days ago  | @ 10 days ago
 @ 8 days ago  | @ 9 days ago
 @ 7 days ago  | @ 8 days ago
 @ 6 days ago  | @ 7 days ago
 @ 5 days ago  | @ 6 days ago
 @ 4 days ago  | @ 5 days ago
 @ 3 days ago  | @ 4 days ago
 @ 2 days ago  | @ 3 days ago
 @ 1 day ago   | @ 2 days ago
 @ 0           | @ 1 day ago
 @ 1 day       | @ 0
 @ 2 days      | @ 1 day
 @ 3 days      | @ 2 days
 @ 4 days      | @ 3 days
 @ 5 days      | @ 4 days
 @ 6 days      | @ 5 days
 @ 7 days      | @ 6 days
 @ 8 days      | @ 7 days
 @ 9 days      | @ 8 days
 @ 10 days     | @ 9 days
(21 rows)

ROLLBACK;
DROP TABLE timeseries_test_schema.schema_test_partitioned_table;
DROP SCHEMA timeseries_test_schema;
-- Test with absolute time results
CREATE TABLE absolute_times_partitioned_table(
    measureid integer,
    eventdate date,
    measure_data integer) PARTITION BY RANGE(eventdate);
BEGIN;
    SELECT create_timeseries_table('absolute_times_partitioned_table', INTERVAL '1 month');
 create_timeseries_table
---------------------------------------------------------------------

(1 row)

    SELECT create_missing_partitions('absolute_times_partitioned_table', '2030-01-01'::date, '2020-01-01'::date);
 create_missing_partitions
---------------------------------------------------------------------
 t
(1 row)

    SELECT *
    FROM pg_catalog.time_partitions
    WHERE parent_table = 'absolute_times_partitioned_table'::regclass
    ORDER BY 3;
           parent_table           | partition_column |                 partition                 | from_value |  to_value  | access_method
---------------------------------------------------------------------
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2021_02 | 02-01-2021 | 03-01-2021 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2021_03 | 03-01-2021 | 04-01-2021 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2021_04 | 04-01-2021 | 05-01-2021 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2021_05 | 05-01-2021 | 06-01-2021 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2021_06 | 06-01-2021 | 07-01-2021 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2021_07 | 07-01-2021 | 08-01-2021 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2021_08 | 08-01-2021 | 09-01-2021 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2021_09 | 09-01-2021 | 10-01-2021 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2021_10 | 10-01-2021 | 11-01-2021 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2021_11 | 11-01-2021 | 12-01-2021 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2021_12 | 12-01-2021 | 01-01-2022 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2022_01 | 01-01-2022 | 02-01-2022 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2022_02 | 02-01-2022 | 03-01-2022 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2022_03 | 03-01-2022 | 04-01-2022 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2022_04 | 04-01-2022 | 05-01-2022 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2020_01 | 01-01-2020 | 02-01-2020 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2020_02 | 02-01-2020 | 03-01-2020 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2020_03 | 03-01-2020 | 04-01-2020 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2020_04 | 04-01-2020 | 05-01-2020 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2020_05 | 05-01-2020 | 06-01-2020 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2020_06 | 06-01-2020 | 07-01-2020 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2020_07 | 07-01-2020 | 08-01-2020 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2020_08 | 08-01-2020 | 09-01-2020 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2020_09 | 09-01-2020 | 10-01-2020 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2020_10 | 10-01-2020 | 11-01-2020 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2020_11 | 11-01-2020 | 12-01-2020 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2020_12 | 12-01-2020 | 01-01-2021 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2021_01 | 01-01-2021 | 02-01-2021 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2022_05 | 05-01-2022 | 06-01-2022 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2022_06 | 06-01-2022 | 07-01-2022 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2022_07 | 07-01-2022 | 08-01-2022 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2022_08 | 08-01-2022 | 09-01-2022 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2022_09 | 09-01-2022 | 10-01-2022 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2022_10 | 10-01-2022 | 11-01-2022 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2022_11 | 11-01-2022 | 12-01-2022 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2022_12 | 12-01-2022 | 01-01-2023 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2023_01 | 01-01-2023 | 02-01-2023 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2023_02 | 02-01-2023 | 03-01-2023 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2023_03 | 03-01-2023 | 04-01-2023 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2023_04 | 04-01-2023 | 05-01-2023 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2023_05 | 05-01-2023 | 06-01-2023 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2023_06 | 06-01-2023 | 07-01-2023 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2023_07 | 07-01-2023 | 08-01-2023 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2023_08 | 08-01-2023 | 09-01-2023 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2023_09 | 09-01-2023 | 10-01-2023 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2023_10 | 10-01-2023 | 11-01-2023 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2023_11 | 11-01-2023 | 12-01-2023 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2023_12 | 12-01-2023 | 01-01-2024 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2024_01 | 01-01-2024 | 02-01-2024 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2024_02 | 02-01-2024 | 03-01-2024 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2024_03 | 03-01-2024 | 04-01-2024 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2024_04 | 04-01-2024 | 05-01-2024 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2024_05 | 05-01-2024 | 06-01-2024 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2024_06 | 06-01-2024 | 07-01-2024 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2024_07 | 07-01-2024 | 08-01-2024 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2024_08 | 08-01-2024 | 09-01-2024 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2024_09 | 09-01-2024 | 10-01-2024 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2024_10 | 10-01-2024 | 11-01-2024 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2024_11 | 11-01-2024 | 12-01-2024 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2024_12 | 12-01-2024 | 01-01-2025 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2025_01 | 01-01-2025 | 02-01-2025 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2025_02 | 02-01-2025 | 03-01-2025 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2025_03 | 03-01-2025 | 04-01-2025 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2025_04 | 04-01-2025 | 05-01-2025 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2025_05 | 05-01-2025 | 06-01-2025 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2025_06 | 06-01-2025 | 07-01-2025 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2025_07 | 07-01-2025 | 08-01-2025 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2025_08 | 08-01-2025 | 09-01-2025 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2025_09 | 09-01-2025 | 10-01-2025 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2025_10 | 10-01-2025 | 11-01-2025 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2025_11 | 11-01-2025 | 12-01-2025 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2025_12 | 12-01-2025 | 01-01-2026 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2026_01 | 01-01-2026 | 02-01-2026 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2026_02 | 02-01-2026 | 03-01-2026 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2026_03 | 03-01-2026 | 04-01-2026 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2026_04 | 04-01-2026 | 05-01-2026 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2026_05 | 05-01-2026 | 06-01-2026 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2026_06 | 06-01-2026 | 07-01-2026 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2026_07 | 07-01-2026 | 08-01-2026 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2026_08 | 08-01-2026 | 09-01-2026 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2026_09 | 09-01-2026 | 10-01-2026 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2026_10 | 10-01-2026 | 11-01-2026 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2026_11 | 11-01-2026 | 12-01-2026 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2026_12 | 12-01-2026 | 01-01-2027 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2027_01 | 01-01-2027 | 02-01-2027 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2027_02 | 02-01-2027 | 03-01-2027 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2027_03 | 03-01-2027 | 04-01-2027 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2027_04 | 04-01-2027 | 05-01-2027 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2027_05 | 05-01-2027 | 06-01-2027 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2027_06 | 06-01-2027 | 07-01-2027 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2027_07 | 07-01-2027 | 08-01-2027 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2027_08 | 08-01-2027 | 09-01-2027 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2027_09 | 09-01-2027 | 10-01-2027 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2027_10 | 10-01-2027 | 11-01-2027 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2027_11 | 11-01-2027 | 12-01-2027 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2027_12 | 12-01-2027 | 01-01-2028 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2028_01 | 01-01-2028 | 02-01-2028 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2028_02 | 02-01-2028 | 03-01-2028 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2028_03 | 03-01-2028 | 04-01-2028 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2028_04 | 04-01-2028 | 05-01-2028 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2028_05 | 05-01-2028 | 06-01-2028 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2028_06 | 06-01-2028 | 07-01-2028 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2028_07 | 07-01-2028 | 08-01-2028 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2028_08 | 08-01-2028 | 09-01-2028 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2028_09 | 09-01-2028 | 10-01-2028 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2028_10 | 10-01-2028 | 11-01-2028 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2028_11 | 11-01-2028 | 12-01-2028 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2028_12 | 12-01-2028 | 01-01-2029 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2029_01 | 01-01-2029 | 02-01-2029 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2029_02 | 02-01-2029 | 03-01-2029 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2029_03 | 03-01-2029 | 04-01-2029 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2029_04 | 04-01-2029 | 05-01-2029 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2029_05 | 05-01-2029 | 06-01-2029 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2029_06 | 06-01-2029 | 07-01-2029 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2029_07 | 07-01-2029 | 08-01-2029 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2029_08 | 08-01-2029 | 09-01-2029 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2029_09 | 09-01-2029 | 10-01-2029 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2029_10 | 10-01-2029 | 11-01-2029 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2029_11 | 11-01-2029 | 12-01-2029 | heap
 absolute_times_partitioned_table | eventdate        | absolute_times_partitioned_table_p2029_12 | 12-01-2029 | 01-01-2030 | heap
(120 rows)

ROLLBACK;
DROP TABLE absolute_times_partitioned_table;
